
## 简介
* Bash 是 Linux 的默认 shell
* Bash 是脚本, 一门编程语言

## set 设置
set -o nounset  # 使用未初始化的变量报错, 同 -u
set -o errexit  # 只要发生错误就退出, 同 -e
set -o pipefail # 只要管道发生错误就退出
set -o errtrace # 函数报错时, 也处理 trap ERR, 同 set -E
set -o  xtrace  # 执行前打印命令, 同 -x
set -o verbose  # 读取前打印命令, 同 -v
set -o vi       # 使用 vi 快捷键
set -- ....     # 重新排列参数

建议使用: set -ueo pipefail

## 特殊字符 -- 要使用原字符必须转义
* 没引号包含
    * {} => 变量分割符 或 将语句封装成块
    * [] => 通配符 或 数字计算等等
    * () => 子shell
    * $  => 读取变量, 无值时默认忽略
    * !  => 一些快捷的方式获取命令或参数
    * ;  => 命令的分割符
    * #  => 注释
    * -  => 字符串以 - 开头表示是可选参数
    * -- => 后面的字符串都不是可选参数
    * '  => 单引号
    * "  => 双引号
    * &  => 后台运行
* 单引号包含:
    * '  => 单引号, 需要在字符串开头加上 $ 符号
* 双引号包含:
    * $  => 读取变量, 无值时默认忽略
    * !  => 一些快捷的方式获取命令或参数
    * "  => 双引号

## 特殊变量
$HOME  -- 主目录
$IPS   -- 默认分隔符, 默认为: " \t\n", 包含转义字符时, 需要在开头添加 $, IFS=$'\n'
$PATH  -- 命令路径
$PS1   -- 提示符
$PWD   -- 当前工作目录
$SHELL -- 当前 shell
$?     -- 上一命令执行是否成功
$$     -- shell ID
$_     -- 上一命令的最后一个参数
$!     -- 后台最后一个进程的进程 ID
$0     -- shell 名称
$-     -- shell 启动参数

## 字符串
v=...   #   解析变量和转义字符
v="..." #   解析变量和转义字符
v='...' # 不解析变量和转义字符
v="...
...
"       # 字符串跨行
v='...
...
'       # 字符串跨行

${v:-w}              # v 不为空, 返回 $v, 否则, 返回 w
${v:=w}              # v 不为空, 返回 $v, 否则, 令 v=w, 返回 w
${v:+w}              # v 不为空, 返回  w, 否则, 返回空
${v:?w}              # v 不为空, 返回 $v, 否则, 输出 w, 退出
${#val}              # 输出字符串的长度
${val:起始位置:长度} # 获取子串
lyb=123
lyb=$lyb+123         # 字符串连接, lyb 将变成 123+123
lyb=123.456.txt
lyb=${lyb%.*}        # 后缀非贪婪匹配, lyb 为 123.456
lyb=${lyb%%.*}       # 后缀  贪婪匹配, lyb 为 123
lyb=${lyb#*.}        # 前缀非贪婪匹配, lyb 为 456.txt
lyb=${lyb##*.}       # 前缀  贪婪匹配, lyb 为 txt
lyb=${lyb/*./str}    # 全文  贪婪匹配, lyb 为 strtxt, 匹配一次
lyb=${lyb//*./str}   # 全文  贪婪匹配, lyb 为 strtxt, 匹配多次
lyb=${lyb^^}         # 变为大写
lyb=${lyb,,}         # 变为小写

## 索引数组:
* v=(1 2 3) # 初始化数组, 以空字符分割多个元素
* ${v[1]}   # 数组中指定元素的值
* ${v[-1]}  # 数组中最后一个元素的值
* ${v[@]}   # 数组中所有元素的值, "1" "2" "3"
* ${#v[@]}  # 数组中元素的个数
* ${!v[@]}  # 获取所有的 key

## 关联数组:
* declare -A v # 关联数组, map
* v[a]=a       # 赋值
* v[-1]=b      # 以 -1 作为 key
               # 其他同索引数组

## 模式扩展 -- 通配符
* ~       用户主目录
* ~lyb    用户 lyb 的主目录, 匹配失败的话, 不扩展
* ~+      当前目录
* ?       任意单个字符, 匹配失败的话, 不扩展
* *       任意多个字符, 匹配失败的话, 不扩展
* [123]   [1,3] 中任意一个, 匹配失败的话, 不扩展
* [1-5]   [1,5] 中任意一个, 匹配失败的话, 不扩展
* [!a]    非 a, 匹配失败的话, 不扩展
* [^a]    非 a, 匹配失败的话, 不扩展
* {1,2,3} [1,3] 匹配失败, 也会扩展
* {,1}    空 或 1, 匹配失败, 也会扩展
* {1..10}          匹配失败, 也会扩展
* {01..10}         匹配失败, 也会扩展(保证两位数)
* {1..10..3}       匹配失败, 也会扩展

## 模拟命令的标准输入
解释变量
cat << EOF
    $lyb
EOF

解释变量
cat << "EOF"
    $lyb
EOF

不解释变量
cat << 'EOF'
    $lyb
EOF

cat <<<  $lyb  #   解释变量
cat <<< "$lyb" #   解释变量
cat <<< '$lyb' # 不解释变量

## 括号 -- 只列举常用的情况
* 命令替换使用 $() 而不是反引号
    * (ls)         # 子shell执行命令, 输出到屏幕上
    * lyb=$(ls)    # 子shell执行命令, 存入变量
* 整数运算
    * (())         # 整数运算, 变量不需要加 $
    * lyb=$((...)) # 将结果存储在变量中
* 使用 [[ ... ]] 测试
    * [[ -z "$lyb" ]] # 判断是否空字符串
    * [[ -n "$lyb" ]] # 判断是否不是空字符串
    * [[ lyb =~ ^l ]] # 扩展的正则表达式匹配
    * [[ -a file   ]] # file 存在
    * [[ -e file   ]] # file 存在
    * [[ -f file   ]] # file 存在且普通文件
    * [[ -d file   ]] # file 存在且是目录
    * [[ -h file   ]] # file 存在且是符号链接
    * [[ -L file   ]] # file 存在且是符号链接
    * [[ -b file   ]] # file 存在且是  块文件
    * [[ -c file   ]] # file 存在且是字符文件
    * [[ -p file   ]] # file 存在且是一个命名管道
    * [[ -S file   ]] # file 存在且是一个网络 socket
    * [[ -s file   ]] # file 存在且其长度大于零
    * [[ -N file   ]] # file 存在且自上次读取后已被修改
    * [[ -r file   ]] # file 存在且可读
    * [[ -w file   ]] # file 存在且可写权
    * [[ -x file   ]] # file 存在且可执行
    * [[ -u file   ]] # file 存在且设置了 SUID
    * [[ -g file   ]] # file 存在且设置了 SGID
    * [[ -k file   ]] # file 存在且设置了 SBIT
    * [[ -O file   ]] # file 存在且属于有效的用户 ID
    * [[ -G file   ]] # file 存在且属于有效的组   ID
    * [[ -t fd     ]] # fd 是一个文件描述符，并且重定向到终端
    * [[ FILE1 -nt FILE2 ] # FILE1 比 FILE2 的更新时间更近, 或者 FILE1 存在而 FILE2 不存在
    * [[ FILE1 -ot FILE2 ] # FILE1 比 FILE2 的更新时间更旧, 或者 FILE2 存在而 FILE1 不存在
    * [[ FILE1 -ef FILE2 ] # FILE1 和 FILE2 引用相同的设备和 inode 编号
* cat <(ls)           # 将命令或函数的输出作为文件

## 其他 bash 操作
bash file_name # 执行文件内的命令
bash -c "ls"   # 将字符串的内容交由 bash 执行, 字符串里可包含重定向和管道

echo -n "123"                # 不换行
echo -e "\e[1;33m lyb \e[0m" # 文本黄色 加粗
echo   $'123\''              # 单引号内存在单引号的情况
echo  $(cal)                 # 输出字符以空格区分
echo "$(cal)"                # 保留输出字符的分割符
echo ${!S*}                  # 列出所有包含 S 的变量

ls &> /dev/null # 重定向

!!    # 上一条命令
!l    # 执行最近使用的以 l 打头的命令
!l:p  # 输出最近使用的以 l 打头的命令
!num  # 执行历史命令列表的第 num 条命令
!$    # 上一条命令的最后一个参数
!*    # 上一条命令的所有参数
^1^2  # 将前一条命令中的 1 变成 2

bg %jobspec # 后台暂停 --> 后台运行, 有无 % 都成
fg %jobspec # 后台     --> 前台运行, 有无 % 都成

jobs          # 列出后台作业
jobs %jobspec # 作业号有无 % 都成
jobs -l       #   列出后台作业的 PID
jobs -p       # 只列出后台作业的 PID
jobs -n       # 只列出进程改变的作业
jobs -s       # 只列出停止的作业
jobs -r       # 只列出运行中的作业

read name     # 读取, 如果参数值小于字段数, 多余的值放入最后一个字段

sleep 30   # 前台运行
sleep 30 & # 后台运行

\command # 忽略别名

env          # 设置环境变量, 然后执行程序

getconf NAME_MAX / # 获取变量的值
getconf PATH_MAX /

history

## 脚本

$0 # 脚本名称
$1 # 第一个参数
$@ # 参数序列
$# # 参数个数

getopts # 处理参数, -- 表示可选参数的终止, 使用见 1.sh

exec &>> 1.log  # 脚本内重定向
exec ls         # 替换当前 shell, 执行后不再执行之后的命令
exec &>  1.txt  # 打开文件描述符, 然后继续执行之后的命令

trap ... ERR  # 发生错误退出时, 执行指定命令
trap ... EXIT # 任意情况退出时, 执行指定命令

if ...; then
    ...
else
    ...
fi





## 常用快捷键
Ctrl+A      # 将光标移到行首
Ctrl+B      # 将光标向左移动一个字符
Ctrl+C      # 向前台进程组发送 SIGINT, 默认终止进程
Ctrl+D      # 删除光标前的字符 或 产生 EOF 或 退出终端
Ctrl+E      # 将光标移到行尾
Ctrl+F      # 将光标向右移动一个字符
Ctrl+G      # 响铃
Ctrl+H      # 删除光标前的一个字符
Ctrl+I      # 相当于TAB
Ctrl+J      # 相当于回车
Ctrl+K      # 删除光标处到行尾的字符
Ctrl+L      # 清屏
Ctrl+M      # 相当于回车
Ctrl+N      # 查看历史命令中的下一条命令
Ctrl+O      # 类似回车，但是会显示下一行历史
Ctrl+P      # 查看历史命令中的上一条命令
Ctrl+Q      # 解锁终端
Ctrl+R      # 历史命令反向搜索, 使用 Ctrl+G 退出搜索
Ctrl+S      # 锁定终端 -- TODO 历史命令正向搜索, 使用 Ctrl+G 退出搜索
Ctrl+T      # 交换前后两个字符
Ctrl+U      # 删除光标处到行首的字符
Ctrl+V      # 输入控制字符
Ctrl+W      # 删除光标左边的一个单词
Ctrl+X      #   TODO-列出可能的补全 ?
Ctrl+Y      # 粘贴被删除的字符
Ctrl+Z      # 前台运行的程序 --> 后台暂停
Ctrl+/      # 撤销之前的操作
Ctrl+\      # 产生 SIGQUIT, 默认杀死进程, 并生成 core 文件
Ctrl+xx     # 光标和行首来回切换

Esc+B              # 移动到当前单词的开头(左边)
Esc+F              # 移动到当前单词的结尾(右边)
Esc+.              # 获取上一条命令的最后的部分

Alt+B              # 向后（左边）移动一个单词
Alt+C              # 光标处字符转为大写
Alt+D              # 删除光标后（右边）一个单词
Alt+F              # 向前（右边）移动一个单词
Alt+L              # 光标处到行尾转为小写
Alt+R              # 取消变更
Alt+T              # 交换光标两侧的单词
Alt+U              # 光标处到行尾转为大写
Alt+BACKSPACE      # 删除光标前面一个单词，类似 Ctrl+W，但不影响剪贴板
Alt+.              # 使用上条命令的最后一个单词

Ctrl+X Ctrl+X      # 连续按两次 Ctrl+X，光标在当前位置和行首来回跳转
Ctrl+X Ctrl+E      # 用你指定的编辑器，编辑当前命令
Ctrl+insert        # 复制命令行内容
shift+insert       # 粘贴命令行内容

