
## Linux 常用命令

apt show    vim # 列出软件包的信息
apt install vim # 安装软件包
apt remove  vim # 卸载软件包
apt purge   vim # 卸载软件包, 删除数据和配置文件
apt update      # 更新软件源
apt upgrade     # 更新软件

bc              #
scale=2         # 设置使用两位小数
ibase=2         # 输入使用二进制
obase=2         # 输出使用二进制

echo       "123"    # 输出 123, 然后换行
echo    -n "123"    # 输出 123
echo -e -n "123\n"  # 输出 123,然后换行, 换行由字符串内的 \n 产生

echo -e "\e[1;30m lyb \e[0m" # 文本颜色:   黑色
echo -e "\e[1;31m lyb \e[0m" # 文本颜色:   红色
echo -e "\e[1;32m lyb \e[0m" # 文本颜色:   绿色
echo -e "\e[1;33m lyb \e[0m" # 文本颜色:   黄色
echo -e "\e[1;34m lyb \e[0m" # 文本颜色:   蓝色
echo -e "\e[1;35m lyb \e[0m" # 文本颜色: 洋红色
echo -e "\e[1;36m lyb \e[0m" # 文本颜色:   青色
echo -e "\e[1;37m lyb \e[0m" # 文本颜色:   白色

echo -e "\e[1;40m lyb \e[0m" # 背景颜色:   黑色
echo -e "\e[1;41m lyb \e[0m" # 背景颜色:   红色
echo -e "\e[1;42m lyb \e[0m" # 背景颜色:   绿色
echo -e "\e[1;43m lyb \e[0m" # 背景颜色:   黄色
echo -e "\e[1;44m lyb \e[0m" # 背景颜色:   蓝色
echo -e "\e[1;45m lyb \e[0m" # 背景颜色: 洋红色
echo -e "\e[1;46m lyb \e[0m" # 背景颜色:   青色
echo -e "\e[1;47m lyb \e[0m" # 背景颜色:   白色

comm 1.txt 2.txt       | tr -d '\t' # 求两个文件的全集
comm 1.txt 2.txt -1 -2 | tr -d '\t' # 求两个文件的交集
comm 1.txt 2.txt -1 -2              # 同上
comm 1.txt 2.txt -3    | tr -d '\t' # 求不同时出现在两个文件中的部分
comm 1.txt 2.txt -1 -3              # B - A
comm 1.txt 2.txt -2 -3              # A - B

cut -f 1,2  # 按列切割
cut -d ":"  # 设置分割符

date -s "20200202 10:10:10" # 更新系统时间, 需要 root 权限
date "+%Y-%m-%d %H:%M:%S"   # 指定输出的格式, 年-月-日 时-分-秒
date "+%F %T"               # 同上
date "+%Y-%m-%d %H:%M"      # 指定输出的格式, 年-月-日 时-分
date "+%F %R"               # 同上
date "+%s"                  # 使用纪元
date -d "20200202 01:01:01" # 指定输入日期

ntpdate -s time-b.nist.gov # 使用时间服务器更新时间

diff    1.txt 2.txt              # 比较两个文件的不同
diff -u 1.txt 2.txt              # 一体化输出, 比较两个文件的不同
diff    1.txt 2.txt > diff.pathc
patch   1.txt diff.pathc         # 恢复文件 2.txt

dpkg -L vim        # 列出 vim 软件包安装的全部文件
dpkg --search /... # 查看该文件是哪个软件包安装的, 使用绝对路径

df -Th # 所挂载的系统的使用情况
du -sh # 某一目录的使用大小

find . -name  lyb                     # 以文件名 或 通配符 查找文件
find . -iname lyb                     # 以文件名 或 通配符 查找文件, 忽略大小写
find . -regex ".*p+"                  # 以文件名 或 正则表达式 查找文件, 忽略大小写
find . -type  f                       # 以类型查找文件
find . \( -type f -and -name lyb \)   # 且, 多个条件必须同时成立
find . \( -type f -a   -name lyb \)   # 同上
find .    -type f      -name lyb      # 同上
find . \( -type f -or  -name lyb \)   # 或, 多个条件成立一个即可
find . \( -type f -o   -name lyb \)   # 同上
find . ! -type f -o   -name lyb       # ! 只否定最近的条件
find . -name '.git' -prune -o -type f # 忽略 .git 目录

firewall-cmd --zone=public --list-ports                       查看所有打开的端口
firewall-cmd --zone=public --get-services                     查看所有的服务
firewall-cmd --zone=public --permanent --add-service=http     添加服务, 永久生效
firewall-cmd --zone=public --permanent --add-service=https    添加服务, 永久生效
firewall-cmd --zone=public             --add-service=https    添加服务
firewall-cmd --zone=public             --remove-service=http  移除服务
firewall-cmd --zone=public --permanent --add-port=8080/tcp    添加端口, 永久生效
firewall-cmd --zone=public             --add-port=8080/tcp    添加端口
firewall-cmd --zone=public             --remove-port=8080/tcp 移除端口
firewall-cmd --reload                                         重新加载配置

gcc -0g main.cc
gcc -01 main.cc
gcc -02 main.cc
gcc -03 main.cc

grep -v          # 输出不匹配的内容
grep -c          # 输出匹配的行的次数
grep -o          # 只输出匹配的内容
grep -n          # 输出匹配的行号
grep -l          # 输出匹配的文件
grep -i          # 忽略大小写
grep -h          # 不输出文件名
grep -q          # 静默输出
grep -A 5        # 输出之前的行
grep -B 5        # 输出之后的行
grep -C 5        # 输出之前之后的行
grep -e .. -e .. # 多个模式取或

ls     # 列出当前目录中的元素
ls -a  # 列出当前目录中的元素（包括隐藏的文件）
ls -l  # 列出当前目录中的元素的详细信息
ls -F  # 在目录后添加 /，在可执行文件后添加 *
ls -d  # 只列出目录本身，而不列出目录内元素
ls -r  # 逆序列出当前目录中的元素
ls -R  # 递归列出当前目录中的元素
ls -1  # 在每一行列出文件名

lsof               # sudo yum install lsof
lsof -iTCP         # 查看 TCP 信息
lsof -i :22        # 查看指定 端口号 的信息
lsof -i@1.2.3.4:22 # 查看是否连接到指定 IP 和 端口号上
lsof -p 1234       # 查看 进程 1234 打开的文件信息
lsof -t            # 仅获取进程ID


pgrep vim         # 列出 使用 vim 的进程号
pgrep vim  -l     # 列出 使用 vim 的进程号和进程名称
pgrep vim  -a     # 列出 使用 vim 的进程号和全路径的完整的进程名称
pgrep vim  -f     # 只要完整进程路径匹配到即可, 而不是进程名的前缀匹配
pgrep vim  -u lyb # 列出有效用户ID 是 lyb 的进程 ID
pgrep vim  -U lyb # 列出真正用户ID 是 lyb 的进程 ID

ps -ef                  # 显示所有进程的详细信息
ps -o pid,ppid,command  # 按指定格式显示进程的信息
ps -f 123               # 显示指定进程的信息

tar -cvf  /path/to/foo.tar --exclude=\*.o /path/to/foo/ # foo         --> foo.tar, 忽略 .o 文件
tar -cvf  /path/to/foo.tar                /path/to/foo/ # foo         --> foo.tar
tar -czvf /path/to/foo.tgz                /path/to/foo/ # foo         --> foo.tgz
tar -czvf /path/to/foo.tar.gz             /path/to/foo/ # foo         --> foo.tar.gz
tar -cjvf /path/to/foo.tar.bz2            /path/to/foo/ # foo         --> foo.tar.bz2
tar -xvf  /path/to/foo.tar                              # foo.tar     --> foo
tar -xzvf /path/to/foo.tgz                              # foo.tgz     --> foo
tar -xzvf /path/to/foo.tar.gz                           # foo.tar.gz  --> foo
tar -xjvf /path/to/foo.tar.bz2                          # foo.tar.bz2 --> foo
tar -xjvf /path/to/foo.tar.bz2 -C /path/to/destination/ # foo.tar.bz2 --> foo, 指定工作目录
tar -acf /path/to/foo.tgz --exclude="*.o" /path/to/foo/ # 根据后缀自动 打包 或 压缩, 并忽略指定文件
tar -acf /path/to/foo.tgz -X file         /path/to/foo/ # 根据后缀自动 打包 或 压缩, 并忽略 file 内的文件
tar -xf  /path/to/foo.tgz -C /path/to/destination/      # 根据后缀 解包 或 解压 到指定目录

tee    1.txt # 管道中把文件拷贝到文件
tee -a 1.txt # 管道中把文件添加到文件

tr    'a-z' 'A-Z' # 小写转大写
tr -d 'a-z'       # 删除字符
tr -s ' '         # 压缩字符

sort       # 排序
sort -k 4  # 指定排序的列字段
sort -t :  # 指定列的分割符
sort -n    # 以数字进行排序
sort -r    # 逆序
sort -f    # 忽略大小写
sort -u    # 重复项只输出一次
sort lyb -o lyb # 排序并存入原文件

systemctl start      nginx   启动 nginx
systemctl stop       nginx   停止 nginx
systemctl restart    nginx   重启 nginx
systemctl status     nginx   查看 nginx 状态
systemctl enable     nginx   开机自动启动 nginx
systemctl disable    nginx   开机禁止启动 nginx
systemctl is-active  nginx   查看 nginx 是否已启动
systemctl is-enabled nginx   查看 nginx 是否开机启动
systemctl list-unit-files    列出所有可用单元

uniq    # 删除重复的行
uniq -c # 输出统计的次数
uniq -d # 只输出重复的行, 重复的项只输出一次
uniq -D # 只输出重复的行, 重复的项只输出多次
uniq -i # 忽略大小写
uniq -u # 只输出没重复的行

sed    "s/123/456/g"        1.txt
sed -i "s/123/456/g"        1.txt   # 直接在原文件上修改
sed -i "s|123|456|g"        1.txt   # 使用不同的分割符
sed -i "/^$/d"              1.txt   # 删除空行
sed -i "s/.*/[&]/g"         1.txt   # & 用于表示所匹配到的内容
sed -i "s/\([0-9]*\).*/\1/g" 1.txt  # \1 表示第一个字串
sed -i "s/\([0-9]\+\).*/\1/g" 1.txt # \1 表示第一个字串, 为什么 + 要转义 * 不用

su              # 切换 root, 输入 root 密码
su root         # 同 su
su -            # 切换 root, 更新主目录, 环境变量等等
su -l           # 同 su -
su - root       # 同 su -
su - root -c ls # 使用 root 执行命令 ls

sudo                                                 # 权限管理文件: /etc/sudoers, 使用 visudo 编辑
                                                     # 使用当前用户的密码
sudo -u USERNAME COMMAND                             # 指定用户执行命令
echo "654321" | sudo -S date -s "20210722 10:10:10"  # 脚本中免密码使用

cat lyb | xargs -i vim {} # 以此编辑 lyb 中的每一个文件

yum list installed       # 列出已安装的软件
yum list vim             # 列出某软件包的详细信息
yum list updates         # 列出可用更新
yum provides file_name   # 查看文件属于哪个软件包
yum update package_name  # 更新某个软件包
yum update               # 更新所有软件包
yum install package_name # 安装软件
yum remove  package_name # 卸载软件
yum erase   package_name # 卸载软件，删除数据和文件

#### Linux 的三个特殊权限
set-user-ID  (SUID) # 可执行文件执行时将拥有程序所有者的权限
set-group-ID (SGID) # 可执行文件执行时将拥有程序所属的组的权限
sticky              # 此目录下的文件只有文件作者 或 root 可以删除

#### 查看 Linux 端口号的范围
```
cat /proc/sys/net/ipv4/ip_local_port_range
32768   60999
``

* [0, 1024) 公认端口号, 需要 root 启动, 比如 80
* [1024, 32768) 注册端口, 可以自己注册一些常用服务
* [32768, 60990) 动态端口, 进程未指定端口号时, 将从这个范围内获取一个端口号
* [60990, 65535)

# 查询 域名 对应 的 IP
* nslookup baidu.com

