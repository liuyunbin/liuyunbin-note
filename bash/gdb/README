
#### gdb 常用命令
```
$ gdb main.cc -g                # 生成可以 gdb 的文件
$
$ gdb [a.out] [pid]             # 启动 gdb
$ gdb> q                        #
$ gdb> quit                     # 退出 gdb
$
$ gdb> file a.out               # 设置可执行文件
$ gdb>                          #
$ gdb> set args arguments       # 设置参数
$ gdb>                          #
$ gdb> r   [arguments]          #
$ gdb> run [arguments]          # 运行程序
$ gdb>                          #
$ gdb> attach pid               # gdb 正在运行的程序
$ gdb>                          #
$ gdb> kill                     # 退出程序
$
$ gdb> info breakpoints         # 列出断点信息
$ gdb>                          #
$ gdb> b     file:function:line #
$ gdb> break file:function:line # 在指定行设置断点
$ gdb> break function           # 在制定函数设置断点
$ gdb> break function if b==0   # 根据条件设置断点
$ gdb>                          #
$ gdb> rbreak function*         # 使用正则设置断点
$ gdb>                          #
$ gdb> tbreak function          # 设置临时断点
$ gdb>                          #
$ gdb> ignore n count           # 忽略断点 n， count 次
$ gdb>                          #
$ gdb> disable [num]            # 忽略断点 num
$ gdb>  enable [num]            # 使断点 num 生效
$ gdb>  delete [num]            # 删除断点 num
$ gdb>                          #
$ gdb> clear file:function:line # 清除指定行的断点
$
$ gdb> c        [num]           #
$ gdb> continue [num]           # 继续运行到指定行 或 断点
$ gdb> u     line               #
$ gdb> until line               # 运行到指定行
$
$ gdb> n    [num]               #
$ gdb> next [num]               # 继续运行多次
$
$ gdb> s                        #
$ gdb> step                     # 进入函数
$ gdb> finish                   # 退出函数
$
$ gdb> p     v            #
$ gdb> print v            # 输出变量的值
$ gdb> print *pointer     # 输出指针指向的值
$ gdb> print *pointeri@10 # 输出数组
$ gdb>
$ gdb> p/x var            # 按十六进制格式显示变量。
$ gdb> p/d var            # 按十进制格式显示变量。
$ gdb> p/u var            # 按十六进制格式显示无符号整型。
$ gdb> p/o var            # 按八进制格式显示变量。
$ gdb> p/t var            # 按二进制格式显示变量。
$ gdb> p/a var            # 按十六进制格式显示变量。
$ gdb> p/c var            # 按字符格式显示变量。
$ gdb> p/f var            # 按浮点数格式显示变量。
$ gdb>                    #
$ gdb> x/8xb &v           # 输出 double 的二进制表示
$ gdb> x/nfu  v           # n 表示打印多少个内存单元
$                         # f 指明打印格式, x, d, u, o, t, a, c, f, 说明同上
$                         # u 表示内存单元, b=1 byte, h=2 bytes, w=4 bytes, g=8 bytes
$ gdb> list               # 列出源码
$ gdb> l                  # 显示当前行之后的源程序
$ gdb> l -                # 显示当前行之前的源程序
$ gdb> list 2,10          # 显示 2 - 10 行的源程序
$ gdb>  set listsize 20   # 设置列出源码的行数
$ gdb> show listsize      # 输出列出源码的行数
$
$ gdb> set  print elements 0 # 设置打印变量长度不受限制
$ gdb> show print elements
$
$ gdb>  watch v         # v 的值有变化时,     立刻停住
$ gdb> rwatch v         # v 的值被读时,       立刻停住
$ gdb> awatch v         # v 的值被读或被写时, 立刻停住
$ gdb> info watchpoints # 查看所有的观察点
$
$ gdb> backtrace # 显示堆栈信息
$ gdb> bt        # 显示堆栈信息
$
$ gdb> frame n # 查看指定层的堆栈信息
$ gdb> f     n # 查看指定层的堆栈信息

$ gdb> into display       # 列出自动打印的值
$ gdb>                    #
$ gdb> display v          # 自动打印 v
$ gdb> delete display     # 删除自动打印
$
$ gdb> info skip          # 列出要跳过的文件 或 函数
$ gdb>                    #
$ gdb> skip function add  # 跳过函数
$ gdb> skip disable [num] # 暂时不跳过
$ gdb> skip  enable [num] # 设置跳过
$ gdb> skip  delete [num] # 删除跳过
```

