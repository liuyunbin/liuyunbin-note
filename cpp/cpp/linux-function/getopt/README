extern char *optarg; # 存储参数
extern int   optind; # 存储下一个在 argv 中, 将要解析的参数, 初始值为 1
extern int   opterr; # 是否输出错误信息, 0 表示不输出, 其他情况表示输出
extern int   optopt; # 存储错误的可选项

int getopt(          int argc, char * const argv[], const char *optstring);
int getopt_long(     int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex);
int getopt_long_only(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex);

重复调用, 依次返回每一个可选项, 无可选项时，返回 -1
默认情况下, 这三个函数将重新排列参数 argv, 使得, 非可选项位于参数的末尾

argv 中的元素 "--" 表明可选参数的结束，"-" 不是可选项

如果 optstring 中的 可选项 后跟着一个冒号, 表明, 该可选项要求一个参数
如果 optstring 中的 可选项 后跟着两个冒号, 表明, 该可选项的参数是可选的，这是 GNU 扩展
如果 optstring 中的    W   后跟着一个分号, 表明，-W foo 将当作 --foo 对待, 这是 GNU 扩展, 在 glibc 2 及其之后
如果 optstring 的第一个参数是 + 或者 环境变量 POSIXLY_CORRECT 被设置, 只要读到非可选项就停止读取
如果 optstring 的第一个参数是 -, 每一个非可选项都将作为字符 1 的参数
如果 optstring 为空, 应该是 "", 而不是 NULL

longopts 指向一个数组, 的最后的元素必须用 0 或 NULL 来填充

struct option {
  const char *name;    # 可选项的名字
  int         has_arg; #       no_argument (0) 无需参数
                       # required_argument (1) 需要参数
                       # optional_argument (2) 参数可选
  int        *flag;    # 如果, flag 为 NULL, 函数将返回 val
                       # 否则, 函数将返回 0, 同时 *falg = val;
  int         val;
};


如果 longindex 不是 NULL, 它将表示所处理的 可选项在 longopts 中的位置

getopt_long_only() 将 '-' 当作 "--" 处理，如果以 '-' 打头的可选项不能匹配长选项, 却能匹配短选项, 那 它将当做短选项来处理

解析长选项时，如果解析失败，将尝试是否能解析无二义性的选项，如果可以找到，也算解析成功

错误情况:
1. 可选项不认识
2. 缺少参数

错误处理:
* 默认情况, 将输出错误信息, 然后，返回 '?'
* 如果 opterr 被设置为 0, 将不会输出错误信息
* 如果 optstring 的第一个字符（'-' 或 '+' 之后）是 ':', 将不会输出错误信息, 如果缺少参数, 将返回 ':', 以此来区分两种错误

例子:
* -o            #   无参数            ，当使用 getopt_long_only 时，如果，在短选项中找不到 o，-o      将当作 --o      解析
* -o arg        # 要求参数            ，当使用 getopt_long_only 时，如果，在短选项中找不到 o，-o arg  将当作 --o arg  解析
* -oarg         # 要求参数 或 可选参数，当使用 getopt_long_only 时，                          -oarg   将当作 --oarg   解析
* -o=arg        #                       当使用 getopt_long_only 时，                          -o=arg  将当作 --o=arg  解析
* --arg         #   无参数
* --arg=param   # 要求参数 或 可选参数
* --arg param   # 要求参数


其它说明:
1. 如果 环境变量 POSIXLY_CORRECT 未被设置, argv 的类型应该是 char** 而不是 char* const *, 因为我们要重新排序
2. 当我们要重头解析 argv 时, optind 要设置成 0 而不是 1, 以便重新判断 '-', '+' 或 环境变量

