
## 简介
* awk 以行为单位，切割成列，处理数据
* awk 是一门编程语言

## 常用命令行参数
awk            script 1.txt
awk -F:        script 1.txt 以字符       : 作为字段分割符
awk -F123      script 1.txt 以字符串   123 作为字段分割符
awk -F[123]    script 1.txt 以字符   1 2 3 作为字段分割符
awk -f         1.awk  1.txt 从文件中读取命令
awk -v lyb=... script 1.txt 定义变量

## 脚本格式
awk 'BEGIN   {}
     pattern {}
     END     {}' 1.txt

* awk 使用扩展的正则表达式
* BEGIN 和 END 都是可选的
* 用单引号 或 双引号 都行, 建议使用单引号, 因为如果使用双引号，使用 $ 符号时必须转义
* pattern 类型
    * 正则表达式: /123/
    * 字段匹配:
        * $1  ~ /123/ 使用正则表达式匹配
        * $1 !~ /123/ 使用正则表达式匹配, 排除匹配到的行
        * $1 ==  123    数值匹配, 精确匹配，> >= == < <=
        * $1 == "123" 字符串匹配, 精确匹配，> >= == < <=

## 基本语法
* 数字:
    * 包括整数和浮点数
    * 整数除以整数，结果可能是小数
* 字符串：以单引号 或 双引号 包含的字符串
* 数组：awk 使用关联数组，下标使用数字或字符串都成
    * 添加或修改元素  : arr[i] = ...
    * 删除数组中的变量: delete arr[i]
    * 遍历数组: i 为数组下标，注意返回的顺序不固定
        for (i in arr) {
            ....
        }
* 变量:
    * 变量不需要声明，可以直接使用
    * 变量使用一般不用使用 $, 除非是数字型变量，为了和数字区分，需要加上 $ 符号
* 赋值：赋值号左右两边有无空格都成
* 语句使用分号分割
*       if 语句, 同 C语言
*    while 语句, 同 C语言
* do while 语句, 同 C语言
*      for 语句，同 C语言, 外加 for (i in arr) i 为索引， arr 为数组

## 常用变量
$0  整行
$1  第一列
FIELDWIDTHS 由空格分隔的一列数字，定义了每个数据字段确切宽度
FS  输入字段分隔符 默认值为空字符
RS  输入记录分隔符 默认值为换行符
OFS 输出字段分隔符 默认值为空格
ORS 输出记录分隔符 默认值为换行符

           命令行参数部分, 下标从 0 开始，脚本不计入命令行参数
ARGC       当前命令行参数个数
ARGIND     当前文件在ARGV中的位置
ARGV       包含命令行参数的数组


CONVFMT    数字的转换格式（参见printf语句），默认值为%.6 g
ENVIRON    当前shell环境变量及其值组成的关联数组
ERRNO      当读取或关闭输入文件发生错误时的系统错误号
FILENAME   用作gawk输入数据的数据文件的文件名
FNR        当前数据文件中的数据行数
IGNORECASE 设成非零值时，忽略gawk命令中出现的字符串的字符大小写
NF         数据文件中的字段总数
NR         已处理的输入记录数
OFMT       数字的输出格式，默认值为%.6 g
RLENGTH    由match函数所匹配的子字符串的长度
RSTART     由match函数所匹配的子字符串的起始位置

## 常用函数
* print    参数以逗号分割，输出的字段分割符默认为空格，结尾将输出换行符
* printf   同 C语言
* int(...) 将浮点数转换为整数，将舍弃小数部分，比如 int(1.9) == 1, int(-1.9) == -1

awk -v  FS=: '{print    $2}' 1.c # 定义变量
awk -v OFS=- '{print $1,$2}' 1.c # 输出字段分割符

## 相关命令
awk 'BEGIN   { getline     } # 读取一行
     pattern { commands    }
     END     { print "end" }' 1.c
* awk 使用扩展的正则表达式
* BEGIN 和 END 都是可选的
* 只能用单引号
awk 'NR < 5'                 1.c # 行号 [1,4] 的行
awk 'NR==1,NR==4'            1.c # 行号 [1,4] 的行
awk '/linux/'                1.c #   包含 linux 的行
awk '!/linux/'               1.c # 不包含 linux 的行
awk '/start/,/end/'          1.c # [] 区间匹配
awk '$1  ~ /lyb.*/'          1.c #     字段匹配
awk '$1 !~ /lyb.*/'          1.c # 排除字段匹配
awk '$1 == 123'              1.c # $1 如果能转化为数字
                                 # 将使用数字匹配
awk          '{print    NF}' 1.c # 字段数量
awk          '{print    NR}' 1.c # 所有文件中的行号
awk          '{print   FNR}' 1.c # 当前文件中的行号
awk          '{print    $0}' 1.c # 当前记录的内容
awk          '{print    $1}' 1.c # 第一个字段的内容
awk          '{print    $2}' 1.c # 第二个字段的内容
awk    '{printf "%s\n", $2}' 1.c # C 风格输出

systime()  -- 获取当前的时间戳
strftime() -- 时间戳 --> 格式化
mktime()   -- 年月日等 --> 时间戳

