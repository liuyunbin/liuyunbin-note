## 简介
Git 是一个分布式版本管理的工具

## 测试环境
* Ubuntu 18.04 LTS
* Git 2.17.1

## 安装
```
$ sudo apt install git
```

## 配置
#### 配置用户名
```
$ git config user.name liuyunbin --system # 整个系统中的项目配置
$ git config user.name liuyunbin --global # 某个用户下的项目配置
$ git config user.name liuyunbin --local  #   单独的某个项目配置
$ git config user.name liuyunbin          #   单独的某个项目配置
```

#### 配置邮箱
```
$ git config user.email yunbinliu@outlook.com --system # 整个系统中的项目配置
$ git config user.email yunbinliu@outlook.com --global # 某个用户下的项目配置
$ git config user.email yunbinliu@outlook.com --local  #   单独的某个项目配置
$ git config user.email yunbinliu@outlook.com          #   单独的某个项目配置
```

#### 配置默认编辑器
```
$ git config core.editor vim --system # 整个系统中的项目配置
$ git config core.editor vim --global # 某个用户下的项目配置
$ git config core.editor vim --local  #         某个项目配置
$ git config core.editor vim          #         某个项目配置
```

#### 检查配置信息
```
$ git config --list --system # 整个系统中的项目配置
$ git config --list --global # 某个用户下的项目配置
$ git config --list --local  #         某个项目配置
$ git config --list          #         某个项目配置
```

#### 生成密钥
```
$ ssh-keygen -t rsa -b 4096 -C yunbinliu@outlook.com
```

#### 复制公钥到 GitHub
将文件 ~/.ssh/id_rsa.pub 里的公钥添加到：https://github.com/settings/keys

## 使用
### 三个工作区域：
1. Git 仓库
2. 暂存区域
3. 工作目录

### 文件和目录的分类：
1. 未跟踪的（untracked），位于工作目录
2. 已暂存的（staged），属于暂存区域，位于 Git 仓库目录
3. 已提交的（committed），位于 Git 仓库目录
4. 已修改的（modified），位于工作目录
5. 已忽略的文件或目录，位于工作目录

### 忽略文件或目录
在文件 .gitignore 中添加要忽略的文件或目录，规则如下：
1. 空行或以 `#` 开头的行将被忽略
2. 以 `/` 开头防止递归
3. 以 `/` 结尾表示目录
4. 以 `!` 开头，表示不忽略文件或目录
5. `*` 匹配任意字符（不包括 `/`）
6. `**` 匹配任意字符
7. `[abc]` 表示匹配方括号内的任意单个字符
8. `[0-9]` 表示匹配范围 [0, 9] 内的任意单个个字符
9. `?` 匹配任意单个字符

### Git 常用命令
**注意：以下说明中均不包含被忽略的文件和目录**

#### 初始化仓库
```
$ git init
```

#### 克隆仓库
```
$ git clone https://github.com/liuyunbin/liuyunbin-toys
$ git clone git@github.com:liuyunbin/liuyunbin-toys         # ssh 协议
$ git clone git@github.com:liuyunbin/liuyunbin-toys.git
```

#### 添加内容到下一次提交当中
未跟踪状态 ----> 已暂存状态 或 已修改状态 ----> 已暂存状态
```
$ git add README
```

#### 提交
```
$ git commit -m "message"
```

#### 跳过使用暂存区域，直接提交
```
$ git commit -a -m "message"
```

#### 修改提交信息，或增加提交的文件或目录
```
$ git commit --amend
```

#### 列出处于未跟踪 或 已修改 或 已暂存的文件的状态
```
$ git status
$ git status  -s     # 显示简短信息
$ git status --short # 显示简短信息
```

#### 查看工作目录中已修改的文件和暂存区域内的文件的差异
```
$ git diff
```

#### 查看暂存区域内下一次要提交的内容
查看暂存区域内的文件和 Git 仓库内的文件的差异
```
$ git diff --staged
$ git diff --cached
```

#### 从暂存区域内移除文件或目录，同时在工作目录中删除
```
$ git rm README
```

#### 仅仅从暂存区域内移除文件或目录，工作目录中的文件保留
```
$ git rm --cached README
```

#### 移动文件或目录
```
$ git mv file_from file_to
```

#### 查看提交历史
```
$ git log
$ git log  -p               # 显示修改的内容
$ git log --patch
$ git log -2                # 显示近两次的提交
$ git log --oneline         # 每个提交一行
$ git log --pretty=oneline  # 每个提交一行
$ git log --graph --oneline # 显示分支的合并
$ git log --name-only       # 显示修改的文件清单
$ git log --after=2021-07-16
$ git log --since=2021-07-16
$ git log --before=2021-07-16
$ git log --after=2021-07-16
$ git log --author=liuyunbin
$
```

#### 取消暂存的文件
已暂存状态 ----> 已修改状态
```
$ git reset HEAD README
```

#### 撤销对文件的修改
已修改状态 ----> 已提交状态
```
$  git checkout -- README
```

#### 查看远程仓库
```
$ git remote -v
```

#### 添加远程仓库
```
$ git remote add <shortname> <url>
```

#### 从远程仓库获取数据
```
$ git fetch [remote-name]
```

#### 推送数据到远程仓库
```
$ git push origin master
```

#### 查看某个远程仓库的详细信息
```
$ git remote show origin
```

#### 重命名远程仓库
```
$ git remote rename pb paul
```

#### 删除远程仓库
```
$ git remote rm     paul
$ git remote remove paul
```

#### 列出标签
```
$ git tag
```

#### 将标签推送到远程
```
$ git push origin v1.5
$ git push origin --tags
```

#### 删除标签
```
$ git tag -d v1.5               # 删除本地 tag
$ git push origin --delete v1.5 # 删除远程 tag
```

#### 列出所有的分支
```
$ git branch
```

#### 新建分支
```
$ git branch test-branch
```

#### 切换分支
```
$ git checkout test-branch
```

#### 新建并切换分支
```
$ git checkout -b test-branch
```

#### 新建并切换到独立分支
```
$ git checkout --orphan test-branch
```

#### 合并分支
```
$ git merge test-branch # 将 test-branch 合并到 当前分支
```

#### 删除分支
```
$ git branch -d test-branch
```

#### 查看远程分支
```
$ git branch -r
$ git ls-remote (remote)
```

#### 拉取并合并数据
```
$ git pull
```

#### 删除远程分支
```
$ git push origin --delete serverfix
```

#### 本地分支和远程分支关联
```
$ git push origin --set-upstream-to=orgin/develop
$ git push origin -u orgin/develop
```

#### 变基
将 server-branch 分支变基到 master 分支
```
$ git rebase master server-branch
```

## 参考资源
1. https://help.github.com/en/articles/set-up-git
2. https://git-scm.com/book/zh/v2

