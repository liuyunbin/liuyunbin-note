
## 通配符
?      # 代表一个字符
*      # 代表零个或多个字符
[123]
[1-5]
[!a]
[^a]

## 基础正则表达式
^     # 开头
$     # 结尾
.     # 除换行符以外的任意字符, 贪婪匹配, .? 最小匹配
[]    # 中括号中      的任意字符
[^]   # 中括号中字符外的任意字符
?     # 前面字符出现 0 次 或 一次, 贪婪匹配, ?? 最小匹配
*     # 前面字符出现 0 次 或 多次, 贪婪匹配, *? 最小匹配
\w    # 0-9 a-z A-Z 中文 下划线, 对应大写表示否定
\s    # 空白字符,                对应大写表示否定
\d    # 数字,                    对应大写表示否定
\b    # 单词开头或结尾, 只是位置匹配, 不匹配任何字符, 相当于断言, 对应大写表示否定
\f
\n
\r
\t
\v

## 扩展正则表达式
+       # 前面字符出现 1 次 或 多次
{n}     # 前面字符出现 n 次
{n,}    # 前面字符出现 n 次 及以上
{n, m}  # 前面字符出现 n 次 到 m 次
()      # 将括号内的内容看成一个整体
|       # 或
(?:...) # 只匹配, 不存储在 \1 等中, sed 貌似不支持
(?=...) # 正向预查
(?!...) # 反向预查

## 例子
* 连续出现两次的数字串: \b([0-9]+)\b\s\1

## 注意
* 会使用基础的正则表达式即可, 太复杂的功能一般也用不上
* 不同语言使用的正则表达式不完全相同

