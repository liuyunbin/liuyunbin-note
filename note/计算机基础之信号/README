
## 信号
信号是一种进程间通信的工具, 也可用于控制进程的行为

## 信号周期
1. 信号产生
    *  1) SIGHUP    # 终端断开时, 向会话ID发送
    *  2) SIGINT    # 键盘中断, 由 ctrl+c 产生
    *  3) SIGQUIT   # 键盘退出, 由 ctrl+\ 产生
    *  4) SIGILL    # 非法指令, 可执行文件有错误
    *  5) SIGTRAP   # 由 debug 产生
    *  6) SIGABRT   # 由 abort() 产生时
                    #   忽略信号, 进程退出
                    #   默认处理, 进程退出
                    #   捕获信号, 并从信号处理函数返回, 进程退出
                    #   捕获信号, 不从信号处理函数返回, 进程继续运行
    *  7) SIGBUS    # 指针非法地址, 比如, 不符合对齐要求
    *  8) SIGFPE    # 浮点数异常, 比如整数除以0
                    #   忽略信号, 进程退出
                    #   默认处理, 进程退出
                    #   捕获信号, 并从信号处理函数返回, 将继续触发此信号
                    #   捕获信号, 不从信号处理函数返回, 进程继续运行
    *  9) SIGKILL   # 退出, 不能被阻塞, 捕获, 忽略
    * 10) SIGUSR1   # 用户自定义信号
    * 11) SIGSEGV   # 指针地址合法, 但无权限访问, 比如, 空指针, 除非跳过异常的行, 否则, 将反复触发
    * 12) SIGUSR2   # 用户自定义信号
    * 13) SIGPIPE   # 写文件描述符时, 对方已退出, 比如 socket, 管道
    * 14) SIGALRM   # 由 alarm() 产生的超时
    * 15) SIGTERM   # 退出信号, kill 默认信号
    * 16) SIGSTKFLT # 栈错误, 未使用
    * 17) SIGCHLD   # 子进程暂停或继续时, 会向父进程发送此信号
                    #   父进程设置 sigaction 的 SA_NOCLDSTOP 后, 不再接收由于子进程暂停或继续产生的信号 SIGCHLD
                    #   父进程设置默认处理, 子进程会向父进程发送此信号, 父进程会忽略此信号
                    #   父进程设置忽略信号, 子进程会向父进程发送此信号, 父进程会忽略此信号
                    #   父进程设置捕获信号, 子进程会向父进程发送此信号, 父进程调用信号处理函数处理
                    # 子进程退出时, 会向父进程发送此信号
                    #   父进程设置 sigaction 的 SA_NOCLDWAIT 后, 不会产生僵尸进程
                    #   父进程设置默认处理,   会产生僵尸进程
                    #   父进程设置忽略信号, 不会产生僵尸进程
                    #   父进程设置捕获信号, 并调用 waitpid() 类函数一次,   会产生僵尸进程
                    #   父进程设置捕获信号, 并调用 waitpid() 类函数循环, 不会产生僵尸进程
    * 18) SIGCONT   # 继续
    * 19) SIGSTOP   # 暂停, 不能被阻塞, 捕获, 忽略
    * 20) SIGTSTP   # 暂停
    * 21) SIGTTIN   # 后台进程读取终端输入
    * 22) SIGTTOU   # 后台进程输出到终端
    * 23) SIGURG    # 带外数据
    * 24) SIGXCPU   # cpu 使用超出限制
    * 25) SIGXFSZ   # 文件大小超出限制
    * 26) SIGVTALRM # 虚拟的超时信号
    * 27) SIGPROF   # setitimer 到期
    * 28) SIGWINCH  # 终端大小发生变化
    * 29) SIGIO     # 异步IO就绪
    * 30) SIGPWR    # 电池问题
    * 31) SIGSYS    # 非法的系统调用
2. 信号传递
    * 内核     => 本进程
    * 本进程   => 自身
    * 其他进程 => 本进程
3. 待决状态
    * 信号被阻塞或者处理前, 处于待决状态
    * 相同的信号处于待决状态时, 只记录一个, 其他信号会丢失
    * 不同的信号处于待决状态时, 优先级如下
        *  4-SIGILL
        *  5-SIGTRAP
        *  7-SIGBUS
        *  8-SIGFPE
        * 11-SIGSEGV
        * 31-SIGSYS
        * 其他信号按数字的从小到大顺序处理
4. 信号触发
    * 信号出发后, 有点系统会将信号处理函数重置为默认处理
    * Linux 不会, 如有需要, 可以使用 sigaction() 的 SA_RESETHAND 设置
5. 信号处理
    * 忽略信号
    * 默认处理(忽略, 退出, 退出产生core, 暂停, 继续)
    * 捕获信号, 自定义处理
    *   信号处理过程中,
    *       相同的信号来了会被阻塞, 此时, 如果再来相同的信号将被抛弃
    *       不同的信号来了会被直接执行, 执行完之后, 再继续执行之前的函数
    *       使用 sigaction() 可以选择阻塞的信号集

## 常用函数
* abort()  # 解锁信号 SIGABRT, 然后向自身发送 SIGABRT
* raise()  # 向自己发送信号
* kill()   # 发送信号
* pause()  # 休眠, 直到不被忽略的信号发生
* sleep()  # 休眠n秒, 或者一个未被忽略的信号到达
* signal() # 设置信号处理函数
           # 信号处理函数不会被重置
           # 被中断系统调用会自动重启
           # 信号处理时, 自身会被阻塞, 其他信号不会
* sigaction() # 设置信号处理函数
              # 可以选择是否自动重启被中断的系统调用
              # 可以选择第一次调用以后, 信号处理函数是否恢复成默认值
              # 可以选择信号处理过程中, 是否阻塞自身, 或这阻塞指定信号集
              # 可以指明对子进程状态变化的处理
              # 可以获取到发送信号一端的一些信息
*  fork()       # 会继承信号处理函数, 未处理的信号被忽略(执行 exec() 之前)
* vfork()       # 保证子进程先运行, 子进程调用 exec() 或 退出前, 父进程处于不可中断的休眠状态
* sigemptyset() # 将信号集置空
* sigfillset()  # 填充所以信号
* sigaddset()   # 添加信号到信号集
* sigdelset()   # 从信号集删除信号
* sigismember() # 判断信号是否处于信号集
* sigprocmask() # 阻塞 或 解阻塞 信号
* longjmp(), setjmp() # 跨函数 goto

