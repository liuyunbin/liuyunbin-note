
#include "test.h"

void test(const string& name, string bit) {
    bit = trim(bit);
    if ((int)bit.size() < 64) {
        bit += string(64 - (int)bit.size(), '0');
    }

    stringstream tmp(to_double_hand(bit));

    Node node;
    tmp >> node.x;

    string bit_cs = bitset<64>(node.y).to_string();

    cout << endl;
    cout << "        测试类型: " << name << endl;
    cout << "    测试的二进制: " << to_bit(bit) << endl;
    cout << "    存储的二进制: " << to_bit(bit_cs) << endl;
    cout << "          手动值: " << to_double_hand(bit) << endl;
    cout << "          存储值: " << to_double_cs(bit_cs) << "(精确值)";
    cout << setprecision(2) << fixed;
    cout << " --> " << node.x << "(保留两位小数)" << endl;
}

void test(const string& name, double x) {
    Node node;
    node.x = x;
    test(name, bitset<64>(node.y).to_string());
}

void test(const string& bit) {
    std::cout << "原字节串(二进制): " << to_bit(bit) << std::endl;
    std::cout << "原字节串(浮点数): " << to_double_hand(bit) << std::endl;
}

void test() {
    cout << "        舍入方向: " << dict_round[fegetround()] << endl;

    test("测试保留小数时的 五进",
         "0 01111111100 0000000000000000000000000000000000000000000000000001");
    test("测试保留小数时的 五取偶(舍)",
         "0 01111111100 0000000000000000000000000000000000000000000000000000");
    test("测试保留小数时的 五取偶(入)",
         "0 01111111101 1000000000000000000000000000000000000000000000000000");

    std::cout << std::endl << "测试存储时的四舍六入五取偶" << std::endl;
    test("测试 最后一位是 0, 多余位是 00(舍)", 4503599627370496);
    test("0100001100110000000000000000000000000000000000000000000000000000 00");

    test("测试 最后一位是 0, 多余位是 01(舍)", 4503599627370496.25);
    test("0100001100110000000000000000000000000000000000000000000000000000 01");

    test("测试 最后一位是 0, 多余位是 10(舍)", 4503599627370496.5);
    test("0100001100110000000000000000000000000000000000000000000000000000 10");

    test("测试 最后一位是 0, 多余位是 11(入)", 4503599627370496.75);
    test("0100001100110000000000000000000000000000000000000000000000000000 11");

    test("测试 最后一位是 1, 多余位是 00(舍)", 4503599627370497);
    test("0100001100110000000000000000000000000000000000000000000000000001 00");

    test("测试 最后一位是 1, 多余位是 01(舍)", 4503599627370497.25);
    test("0100001100110000000000000000000000000000000000000000000000000001 01");

    test("测试 最后一位是 1, 多余位是 10(入)", 4503599627370497.5);
    test("0100001100110000000000000000000000000000000000000000000000000001 10");

    test("测试 最后一位是 1, 多余位是 11(入)", 4503599627370497.75);
    test("0100001100110000000000000000000000000000000000000000000000000001 11");
}

int main() {
    init();
    test();
    return 0;
}
